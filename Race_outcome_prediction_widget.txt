Certainly! Below is a full integrated code bundle for a standalone, embeddable AI-powered race outcome prediction widget based on the backend logic you approved. It includes:

    Backend: Node.js + Express API with robust input validation, sanitization, rate limiting, CORS, and secure headers.

    Frontend: Vanilla JS widget that can be embedded anywhere, with input sanitization, accessibility, and secure interaction with the backend.

    Security features: Input validation/sanitization on both ends, rate limiting, security headers, CORS, error handling, and output escaping.

    Deployment-ready: Self-contained, minimal dependencies, easy to slot into any website.

Overall Plan Before Implementation

    Backend

        Validate and sanitize inputs using express-validator.

        Sanitize outputs to prevent injection.

        Implement rate limiting with express-rate-limit.

        Use helmet for security headers.

        Enable CORS for embedding.

        Provide /api/predict POST endpoint.

        Provide /api/health GET endpoint for health checks.

    Frontend

        Simple, responsive UI for race ID and runners input.

        Client-side validation and sanitization.

        Fetch API to call backend predict endpoint.

        Display predictions clearly with accessibility features.

        Error handling and loading states.

    Packaging

        Backend: single server.js file.

        Frontend: single equinedge-widget.html file.

        Instructions for deployment and embedding.

Step 1: Backend Code (server.js)
// server.js - EquinEdge AI Prediction Backend

const express = require('express');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const cors = require('cors');
const { body, validationResult } = require('express-validator');

const app = express();
const PORT = process.env.PORT || 4000;

// Middleware
app.use(helmet());
app.use(express.json());

// Rate limiter: max 100 requests per 15 minutes per IP
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: { error: 'Too many requests, please try again later.' },
});
app.use(limiter);

// CORS: Allow all origins for embedding; adjust for production if needed
app.use(cors({
  origin: '*',
  methods: ['POST', 'GET'],
  allowedHeaders: ['Content-Type'],
}));

// Utility: sanitize string inputs (remove dangerous characters)
function sanitizeString(str) {
  if (typeof str !== 'string') return '';
  return str.replace(/[<>\/\\'"]/g, '');
}

// Simulated AI prediction function
function generateRaceProbabilities(runners) {
  // Assign random base scores with bias for demonstration
  let scores = runners.map((runner, idx) => {
    return Math.max(0.1, (1 / (idx + 1)) + (Math.random() * 0.1 - 0.05));
  });

  // Normalize scores to probabilities summing to 1
  const total = scores.reduce((sum, val) => sum + val, 0);
  const probabilities = scores.map(score => +(score / total).toFixed(4));

  // Pair runners with sanitized names and probabilities
  return runners.map((runner, idx) => ({
    runner: sanitizeString(runner),
    winProbability: probabilities[idx]
  }));
}

// POST /api/predict endpoint
app.post('/api/predict', [
  body('raceId').isString().trim().isLength({ min: 1, max: 20 }).escape(),
  body('runners').isArray({ min: 2, max: 20 }),
  body('runners.*').isString().trim().isLength({ min: 1, max: 50 }).escape()
], (req, res) => {
  // Validate inputs
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ error: 'Invalid input', details: errors.array() });
  }

  const { raceId, runners } = req.body;

  // Generate predictions
  const predictions = generateRaceProbabilities(runners);

  // Respond
  res.json({
    raceId,
    predictions,
    generatedAt: new Date().toISOString()
  });
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Start server
app.listen(PORT, () => {
  console.log(`EquinEdge AI prediction API running on port ${PORT}`);
});
Step 2: Frontend Widget (equinedge-widget.html)
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>EquinEdge AI Prediction Widget</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0; padding: 1rem;
      background: #f9f9f9;
      color: #222;
    }
    #widget {
      max-width: 400px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 0 10px #ccc;
      padding: 1rem;
    }
    h2 {
      margin-top: 0;
      font-size: 1.5rem;
      color: #004080;
    }
    label {
      display: block;
      margin-top: 0.5rem;
      font-weight: bold;
    }
    input[type=text], textarea {
      width: 100%;
      padding: 0.5rem;
      margin-top: 0.25rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      font-size: 1rem;
    }
    textarea {
      resize: vertical;
      height: 80px;
    }
    button {
      margin-top: 1rem;
      background-color: #004080;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 4px;
      font-size: 1rem;
      cursor: pointer;
    }
    button:disabled {
      background-color: #999;
      cursor: not-allowed;
    }
    #results {
      margin-top: 1rem;
      background: #eef6ff;
      border-radius: 6px;
      padding: 1rem;
      font-size: 0.95rem;
      color: #003366;
    }
    .error {
      color: red;
      margin-top: 0.5rem;
    }
    ul.predictions {
      list-style: none;
      padding-left: 0;
    }
    ul.predictions li {
      margin-bottom: 0.3rem;
    }
  </style>
</head>
<body>
  <div id="widget" role="region" aria-label="EquinEdge AI Horse Race Predictor">
    <h2>EquinEdge AI Handicapping</h2>
    <form id="predictionForm" novalidate>
      <label for="raceId">Race ID:</label>
      <input type="text" id="raceId" name="raceId" required aria-required="true" maxlength="20" pattern="[A-Za-z0-9\-]+" title="Alphanumeric and dashes only" />

      <label for="runners">Runners (one per line, 2-20 runners):</label>
      <textarea id="runners" name="runners" required aria-required="true" placeholder="Enter runner names, one per line"></textarea>

      <button type="submit" id="submitBtn">Get Predictions</button>
      <div id="formError" class="error" role="alert" aria-live="assertive"></div>
    </form>

    <div id="results" aria-live="polite" aria-atomic="true" hidden></div>
  </div>

  <script>
    (function() {
      const form = document.getElementById('predictionForm');
      const resultsDiv = document.getElementById('results');
      const errorDiv = document.getElementById('formError');
      const submitBtn = document.getElementById('submitBtn');

      // Sanitize text to prevent XSS
      function sanitizeText(str) {
        const div = document.createElement('div');
        div.textContent = str;
        return div.innerHTML;
      }

      // Validate inputs
      function validateInputs(raceId, runners) {
        if (!raceId || !/^[A-Za-z0-9\-]+$/.test(raceId)) {
          return 'Race ID is required and must be alphanumeric or dashes only.';
        }
        if (!runners || runners.length < 2 || runners.length > 20) {
          return 'Please enter between 2 and 20 runners.';
        }
        for (const r of runners) {
          if (!r.trim()) {
            return 'Runner names cannot be empty.';
          }
          if (r.length > 50) {
            return 'Runner names must be less than 50 characters.';
          }
        }
        return null;
      }

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        errorDiv.textContent = '';
        resultsDiv.hidden = true;
        resultsDiv.innerHTML = '';

        const raceId = form.raceId.value.trim();
        const runnersRaw = form.runners.value.trim();
        const runners = runnersRaw.split('\n').map(r => r.trim()).filter(r => r.length > 0);

        const validationError = validateInputs(raceId, runners);
        if (validationError) {
          errorDiv.textContent = validationError;
          return;
        }

        submitBtn.disabled = true;
        submitBtn.textContent = 'Loading...';

        try {
          const response = await fetch('https://your-backend-domain.com/api/predict', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ raceId, runners })
          });

          if (!response.ok) {
            const errData = await response.json();
            throw new Error(errData.error || 'Server error');
          }

          const data = await response.json();

          let html = `<h3>Predictions for Race ${sanitizeText(data.raceId)}</h3>`;
          html += '<ul class="predictions">';
          data.predictions.forEach(p => {
            html += `<li><strong>${sanitizeText(p.runner)}</strong>: ${(p.winProbability * 100).toFixed(2)}% chance to win</li>`;
          });
          html += '</ul>';
          html += `<small>Generated at: ${new Date(data.generatedAt).toLocaleString()}</small>`;

          resultsDiv.innerHTML = html;
          resultsDiv.hidden = false;
        } catch (err) {
          errorDiv.textContent = `Error: ${sanitizeText(err.message)}`;
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Get Predictions';
        }
      });
    })();
  </script>
</body>
</html>
Step 3: Deployment & Embedding Instructions

    Backend:

        Deploy server.js on a Node.js environment (e.g., Heroku, AWS, DigitalOcean).

        Ensure HTTPS is enabled for security.

        Update CORS origins in server.js if you want to restrict embedding domains.

    Frontend:

        Update the fetch URL https://your-backend-domain.com/api/predict in the widget HTML to point to your deployed backend.

        Embed the entire equinedge-widget.html content as an iframe or inline HTML+JS snippet on any website.

Step 4: Testing the Complete Solution

    Open the widget HTML in a browser.

    Enter a valid race ID (e.g., R123).

    Enter 2-20 runner names (each on a new line).

    Submit and observe predictions.

    Try invalid inputs to verify validation and error handling.

    Monitor backend logs for rate limiting and errors.

Summary

This bundle provides a secure, embeddable AI handicapping widget with:

    Backend API with input validation, sanitization, rate limiting, CORS, and security headers.

    Simulated AI prediction logic generating normalized race outcome probabilities.

    Frontend widget with accessible, sanitized inputs and clear results display.

    Easy deployment and embedding instructions.

If you want, I can also help with:

    Packaging the frontend as a JavaScript widget for direct script embedding.

    Adding authentication or API key protection.


Integrating real AI models or databases.

Dockerizing the backend for container deployment.

